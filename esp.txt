#include <Adafruit_Sensor.h>
#include <DHT.h>
#include <DHT_U.h>
#include <ArduinoJson.h>
#include <HTTPClient.h>
//#include <WiFiMulti.h>
#include <WiFi.h>
#include <WiFiClientSecure.h>


#define LED 2

const char *AP_SSID = "Orange_Swiatlowod_9080";//"2.4G-PrincessK";
const char *AP_PWD = "iPn7m9TSLVrmh2YKEY";
const char *serverName = "https://swietnadoniczka.pythonanywhere.com/pump/1";

//WiFiMulti wifiMulti;
WiFiClientSecure client;
HTTPClient http;

//#define LED_GPIO 2
#define DHTPIN 2
#define DHTTYPE  DHT11 
#define WATER_SENSOR_PIN 4    // Pin, do którego podłączony jest czujnik wody

const int PWMB = 5;  // PWM Pin dla silnika B
const int BIN1 = 18;  // Kierunek 1 dla silnika B
const int BIN2 = 23;  // Kierunek 2 dla silnika B
const int relay = 15;
const int ledpin2 = 2;
DHT_Unified dht(DHTPIN, DHTTYPE);
uint32_t delayMS;

bool podlano;

void setup() {
  Serial.begin(9600);
  pinMode(ledpin2, OUTPUT);
  pinMode(relay, OUTPUT);
  pinMode(PWMB, OUTPUT);  
  pinMode(BIN1, OUTPUT);
  pinMode(BIN2, OUTPUT);
  pinMode(WATER_SENSOR_PIN, INPUT);
  pinMode(DHTPIN, INPUT);
  digitalWrite(relay, HIGH);
   WiFi.begin(AP_SSID, AP_PWD);
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.println("Connecting to WiFi...");
  }
  Serial.println("Connected to WiFi");

  client.setInsecure();
  dht.begin();
  Serial.println(F("DHT11 Unified Sensor Example"));
  // Print temperature sensor details.
  sensor_t sensor;
  dht.temperature().getSensor(&sensor);
  Serial.println(F("------------------------------------"));
  Serial.println(F("Temperature Sensor"));
  Serial.print  (F("Sensor Type: ")); Serial.println(sensor.name);
  Serial.print  (F("Driver Ver:  ")); Serial.println(sensor.version);
  Serial.print  (F("Unique ID:   ")); Serial.println(sensor.sensor_id);
  Serial.print  (F("Max Value:   ")); Serial.print(sensor.max_value); Serial.println(F("°C"));
  Serial.print  (F("Min Value:   ")); Serial.print(sensor.min_value); Serial.println(F("°C"));
  Serial.print  (F("Resolution:  ")); Serial.print(sensor.resolution); Serial.println(F("°C"));
  Serial.println(F("------------------------------------"));
  dht.humidity().getSensor(&sensor);
  Serial.println(F("Humidity Sensor"));
  Serial.print  (F("Sensor Type: ")); Serial.println(sensor.name);
  Serial.print  (F("Driver Ver:  ")); Serial.println(sensor.version);
  Serial.print  (F("Unique ID:   ")); Serial.println(sensor.sensor_id);
  Serial.print  (F("Max Value:   ")); Serial.print(sensor.max_value); Serial.println(F("%"));
  Serial.print  (F("Min Value:   ")); Serial.print(sensor.min_value); Serial.println(F("%"));
  Serial.print  (F("Resolution:  ")); Serial.print(sensor.resolution); Serial.println(F("%"));
  Serial.println(F("------------------------------------"));
}
void loop() {
  if (WiFi.status() == WL_CONNECTED) {
    if (http.begin(client, serverName)) {
      int httpCode = http.GET();
      if (httpCode == HTTP_CODE_OK) {
        String payload = http.getString();
        Serial.println(payload);

        // Parsowanie JSON
        DynamicJsonDocument doc(1024);
        DeserializationError error = deserializeJson(doc, payload);
        if (error) {
          Serial.print("JSON parsing error: ");
          Serial.println(error.c_str());
        } else {
          sensors_event_t event;
          dht.temperature().getEvent(&event);
          Serial.print(F("Temperature: "));
          Serial.print(event.temperature);
          Serial.println(F("°C"));
          dht.humidity().getEvent(&event);
          Serial.print(F("Humidity: "));
          Serial.print(event.relative_humidity);
          Serial.println(F("%"));
          int waterLevel = digitalRead(WATER_SENSOR_PIN);
          bool czy_wylac = payload.substring(payload.indexOf("czy_wylano") + 3, payload.indexOf("czy_wylano") + 4).toInt();
          int czy_podlac = payload.substring(payload.indexOf("czy_wlano") + 3, payload.indexOf("czy_wlano") + 4).toInt();
          Serial.println("OD FUNKCJI czy_wylac");
          Serial.println(czy_wylac);
          Serial.println("OD FUNKCJI czy_podlac");
          Serial.println(czy_podlac);
          if (czy_podlac == 0)
            {
                while (waterLevel == LOW) {
                digitalWrite(PWMB, 255);
                digitalWrite(BIN1, HIGH);
                digitalWrite(BIN2, LOW);
                int stan_BIN2 = digitalRead(BIN2);
                Serial.print("Stan pinu BIN2: ");
                Serial.println(stan_BIN2);
                postDataToServer(1, event.relative_humidity, event.temperature); // 1 stopuje nam podlewanie
                }
                digitalWrite(BIN1, LOW);
                digitalWrite(BIN2, LOW);
            }
          if (czy_wylac == 1)
            {
                while (waterLevel != LOW) {
                digitalWrite(PWMB, 255);
                digitalWrite(BIN2, HIGH); // Dostosować odpowiednio wyjścia pompy
                digitalWrite(BIN1, LOW);
                int stan_BIN2 = digitalRead(BIN2);
                Serial.print("Stan pinu BIN2: ");
                Serial.println(stan_BIN2);
                postDataToServer(1, event.relative_humidity, event.temperature); // 1 stopuje nam wylewanie
                }
                delay(300000); // przerwa w wylaczeniu na 5 min zeby odpompowal
                digitalWrite(BIN1, LOW);
                digitalWrite(BIN2, LOW);
            }
        }
    }
  }
  }
  else {
    Serial.println(F(" NIE UDALO SIE"));
  }
  delay(1000);  // Poczekaj 1 sekunde przed kolejnym sprawdzeniem
}
void postDataToServer(int dane, int humidity, int temperature) {

    
  Serial.println("Posting JSON data to server...");
  // Block until we are able to connect to the WiFi access point
  if (WiFi.status() == WL_CONNECTED) {

    HTTPClient http;

    http.begin("https://swietnadoniczka.pythonanywhere.com/pumps");
    http.addHeader("Content-Type", "application/json");

    StaticJsonDocument<200> doc;

    //doc["time_stamp"] = "2022-05-20T11:10:00";
    //doc["value"] = dane;
    //doc["device_id"] =   1;
    doc["temperature"] = temperature;
    doc["humidity"] = humidity;
    //doc["czy_wylano"] = 0;
    doc["stop"] = dane;

    Serial.print("STOP: ");
    Serial.println(dane);

    String requestBody;
    serializeJson(doc, requestBody);

    Serial.println(requestBody);
    Serial.println("Wyslany");

    int httpResponseCode = http.POST(requestBody);

    delay(100);

    if(httpResponseCode>0){
      String response = http.getString();
      Serial.println(httpResponseCode);
      Serial.println(response);
    }
    else {
      Serial.print("Error code: ");
      Serial.println(httpResponseCode);
    }
  }
}
/*void czyWylac()
{
    if (WiFi.status() == WL_CONNECTED)
    {
        HTTPClient http;

        String serverPath = "https://swietnadoniczka.pythonanywhere.com/czywylac/2";
        http.begin(serverPath.c_str());

        int httpResponseCode = http.GET();

        if (httpResponseCode > 0)
        {
            String payload = http.getString();

            Serial.println(payload);

            // Sprawdź wartość zwróconą przez funkcję czywylac z kodu Python
            bool czy_wylac = payload.substring(payload.indexOf("czy_wylano") + 3, payload.indexOf("czy_wylano") + 4).toInt();

            if (czy_wylac)
            {

                digitalWrite(BIN2, HIGH); // Dostosować odpowiednio wyjścia pompy
                digitalWrite(BIN1, LOW);
                delay(1000); // Możesz dostosować czas pracy pompy
                //digitalWrite(BIN1, LOW);
               // digitalWrite(BIN2, LOW);

            }
        }
        else
        {
            Serial.print("Error code: ");
            Serial.println(httpResponseCode);
        }

        http.end();
    }
    else
    {
        Serial.println("WiFi Disconnected");
    }
*/
